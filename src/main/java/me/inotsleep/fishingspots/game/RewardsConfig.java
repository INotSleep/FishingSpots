package me.inotsleep.fishingspots.game;

import me.inotsleep.utils.AbstractConfig;
import me.inotsleep.utils.AbstractPlugin;
import org.bukkit.configuration.ConfigurationSection;

import java.util.HashMap;
import java.util.Map;

public class RewardsConfig extends AbstractConfig {
    public Map<String, Map<Double, String>> rarities;
    public Map<String, DropItems> items;
    public RewardsConfig(AbstractPlugin plugin) {
         super(plugin, "rewards.yml", false);
    }

    @Override
    public void addDefaults() {
        rarities = new HashMap<>();
        items = new HashMap<>();
        header= "Items will be autogenerated.\n" +
                "To generate you need to use command '/fishingspots createitem <id>' holding item in hand\n" +
                "After that just edit other settings here\n" +
                "\n" +
                "Rarity chances you need to create by yourself by this example:\n" +
                "rarities:\n" +
                "    common:\n" +
                "        item1: 10.0\n" +
                "        item2: 40.0\n" +
                "        item3: 100.0\n" +
                "\n" +
                "That means that you need to have 100% item, that will be most common";

    }

    @Override
    public void doReloadConfig() {
        rarities = new HashMap<>();
        items = new HashMap<>();
        ConfigurationSection raritiesSection = config.getConfigurationSection("rarities");
        if (raritiesSection != null) raritiesSection.getKeys(false).forEach(key -> {
            Map<Double, String> map = new HashMap<>();
            raritiesSection.getConfigurationSection(key).getKeys(false).forEach(item -> map.put(raritiesSection.getDouble(key+"."+item), item));
            rarities.put(key, map);
        });
        ConfigurationSection itemsSection = config.getConfigurationSection("items");
        if (itemsSection != null) itemsSection.getKeys(false).forEach(key -> items.put(key, new DropItems(config.getItemStack("items."+key+".stack"), config.getInt("items."+key+".min"), config.getInt("items."+key+".max"))));
    }

    @Override
    public void doSave() {
        items.forEach((k, dropItems) -> {
            config.set("items."+k+".stack", dropItems.itemStack);
            config.set("items."+k+".min", dropItems.min);
            config.set("items."+k+".max", dropItems.max);
        });
    }

}
